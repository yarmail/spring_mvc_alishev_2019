Урок 39 Индексы в БД

Объяснение на примере
Предположим у нас есть таблица на 5 млн строк (Transaction)
Одна из колонок (amount) - это случайные значения

Если много запросов к этой колонке, например
select * from Transaction where amount > 500
select * from Transaction where amount = 99.99

тогда эти запросы будут очень медленно выполняться
т.к. идет линейный поиск (full table scan)
- т.е. проход - поиск по каждому значению из колонки

---

Чтобы ускорить запросы такого рода можно использовать
индексы. Мы можем создать индекс на колонке amount
Индекс можно себе представить как ещё одна таблица
в которой отсортированы по порядку значения.
index.png

После сортировки мы можем использовать не только линейный,
но и, например, двоичный поиск (binary search)
(делим последовательность на два, и смотрим, в какой
половине нужное значание, сужаем поиск и повторяем его)

---

Какие плюсы?
Поиск с индексом идет намного быстрее. При таблице 5 млн
худшее значение линейного поиска 5 млн, среднее 2.3 млн
При двоичном поиске, в худшем случае
Ссылка на урок по двоичному поиску
https://www.youtube.com/watch?v=074rf3JuLiE
получается log2(5млн) = 23 итерации

---

Недостатки индексов
1. Индекс занимает такое-же место на диске как и колонка
(например 5 млн) строк
2. надо поддерживать индекс в отсортированном виде
(при каждой вставке) - более медленные вставки в таблицу
Поэтому инднкс надо создавать только для тех колонок,
по которым чаще всего производится поиск с помощью WHERE например

---

Индексы в PostgreSQL
Создаются примерно так:

CREATE INDEX ON Transaction(amount) USING ???

- Primary key - первичный ключ индексируется по умолчанию
- B-Tree Index - для Б дерева
- Hash Index - текстовые колонки
- Gin&GistIndex - текстовые колонки
- BRIN Index

Индексирование - очень обширная тема, здесь только начало