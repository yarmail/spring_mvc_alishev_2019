/*
Урок 38 отношение one to many
Создаем таблицу Режисер
и таблицу Фильм
*/
create table Director(
    director_id int generated by default as identity primary key,
    name varchar(100) not null unique,
    age int check (age > 10)
);

create table Movie(
    movie_id int generated by default as identity primary key,
    director_id int not null references Director(director_id),
    name varchar(200) not null,
    year_of_production int check (year_of_production > 1900)
);
/*
желтый ключ в таблице - первичный, голубой - внешний
Внешний ключ устанавливает отношение один ко многим
*/
INSERT INTO Director(name, age) VALUES ('Quentin Tarantino', 57);
INSERT INTO Director(name, age) VALUES ('Martin Scorsese', 78);
INSERT INTO Director(name, age) VALUES ('Guy Ritchie', 52);
INSERT INTO Director(name, age) VALUES ('Woody Allen', 85);
INSERT INTO Director(name, age) VALUES ('David Lynch', 74);
INSERT INTO Director(name, age) VALUES ('Christopher Nolan', 50);

INSERT INTO Movie(director_id, name, year_of_production) VALUES (1, 'Reservoir Dogs', 1992);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (1, 'Pulp Fiction', 1994);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (1, 'The Hateful Eight', 2015);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (1, 'Once Upon a Time in Hollywood', 2019);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (2, 'Taxi Driver', 1976);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (2, 'Goodfellas', 1990);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (2, 'The Wolf of Wall Street', 2013);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (3, 'Lock, Stock and Two Smoking Barrels', 1998);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (3, 'Snatch', 2000);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (4, 'Midnight in Paris', 2011);
INSERT INTO Movie(director_id, name, year_of_production) VALUES (6, 'Inception', 2010);

-- пробуем вставить фильм с несуществующим режиссером - ПОЛУЧАЕМ ОШИБКУ (на это и нужна REFERENCES)
INSERT INTO Movie(director_id, name, year_of_production) VALUES (10, 'bla bla', 2020);

-- Join'им
-- Выводим всех режиссеров, у которых есть фильмы и для каждого режиссера выводим его фильмы
select * from Director join Movie on Director.director_id = Movie.director_id;
-- мы видим, что у режиссера с id=5 нет ни одного фильма в нашей БД (суженный запрос)

-- уточняем этот запрос, оставляем только полезные колонки
select Director.name, Movie.name
from Director join Movie
on Director.director_id = Movie.director_id;

-- Расширяем запрос (left join) чтобы показать всех режиссеров
-- и видим что у Девида Линча нет фильмов во второй таблице
select Director.name, Movie.name
from Director left join Movie
on Director.director_id = Movie.director_id;

-- ====================================================

/*
 Создаем отношение один к одному
 Для этого используем таблицы Гражданин и Паспорт
*/

create table Citizen(
    citizen_id int generated by default as identity primary key,
    name varchar(100) not null,
    age int check (age>0)
);

create table Passport(
    citizen_id int primary key references Citizen(citizen_id),
    passport_number int
);

-- citizen_id является и первичным и внешним ключом

INSERT INTO Citizen(name, age) VALUES ('Bob', 12);
INSERT INTO Citizen(name, age) VALUES ('Tom', 24);
INSERT INTO Citizen(name, age) VALUES ('Katy', 39);
INSERT INTO Citizen(name, age) VALUES ('Alice', 45);
INSERT INTO Citizen(name, age) VALUES ('Jane', 1);

INSERT INTO Passport(citizen_id, passport_number) VALUES (1, 12345);
INSERT INTO Passport(citizen_id, passport_number) VALUES (2, 75124);
INSERT INTO Passport(citizen_id, passport_number) VALUES (3, 91245);
INSERT INTO Passport(citizen_id, passport_number) VALUES (4, 19259);

-- не можем назначить одному человеку несколько паспортов
INSERT INTO Passport(citizen_id, passport_number) VALUES (3, 12455);

-- и также не можем назначить паспорт несуществующему человеку
INSERT INTO Passport(citizen_id, passport_number) VALUES (10, 12455);

-- показать всех жителей, у которых есть пасспорт (строже join)
select name, passport_number
from citizen join passport
on Citizen.citizen_id = Passport.citizen_id;

-- показать всех жителей, не важно, есть у них паспорт или нет
-- видно что у Jane нету паспорта
select name, passport_number
from citizen left join passport
on Citizen.citizen_id = Passport.citizen_id;

-- ==========================================

/*
 Отношение many to many
 на примере таблиц Актеры и фильмы (фильмы создались ранее)
 */
create table Actor(
    actor_id int generated by default as identity primary key,
    name varchar(100) not null unique,
    age int check(age>0)
);

INSERT INTO Actor(name, age) VALUES ('Harvey Keitel', 81);
INSERT INTO Actor(name, age) VALUES ('Robert De Niro', 77);
INSERT INTO Actor(name, age) VALUES ('Leonardo DiCaprio', 46);
INSERT INTO Actor(name, age) VALUES ('Jason Statham', 53);
INSERT INTO Actor(name, age) VALUES ('Joe Pesci', 77);
INSERT INTO Actor(name, age) VALUES ('Samuel L. Jackson', 72);

-- Создаем связывающую таблицу (JOIN TABLE)
-- с составным ключом
create table Actor_Movie(
    actor_id int references Actor(actor_id),
    movie_id int references Movie(movie_id),
    PRIMARY KEY (actor_id, movie_id)
);

INSERT INTO Actor_Movie VALUES(1, 1);
INSERT INTO Actor_Movie VALUES(1, 2);
INSERT INTO Actor_Movie VALUES(2, 5);
INSERT INTO Actor_Movie VALUES(2, 6);
INSERT INTO Actor_Movie VALUES(3, 4);
INSERT INTO Actor_Movie VALUES(3, 7);
INSERT INTO Actor_Movie VALUES(3, 11);
INSERT INTO Actor_Movie VALUES(4, 8);
INSERT INTO Actor_Movie VALUES(4, 9);
INSERT INTO Actor_Movie VALUES(5, 6);
INSERT INTO Actor_Movie VALUES(6, 2);
INSERT INTO Actor_Movie VALUES(6, 3);

-- Пробуем вставить дубликат по двум колонкам - ошибка
INSERT INTO Actor_Movie VALUES(6, 3);

-- Чтобы узнать, какой актер снимался в каком фильме, нам надо сделать два Join'а
-- Join для случая отношения Многие ко многим
SELECT Actor.name, Movie.name
FROM Actor JOIN actor_movie
ON actor.actor_id = actor_movie.actor_id
JOIN movie ON actor_movie.movie_id = movie.movie_id;