Урок 26: SQL инъекции. PreparedStatement. JDBC API

Составление SQL запроса вручную
1) Неудобно
2) Легко допустить ошибку
3) Угроза SQL инъекции
Пример:
.
    public void save(Person person) {
        try {
            Statement statement = connection.createStatement();
            String SQL = "INSERT INTO Person VALUES(" + 1 + ",'" + person.getName() +
                    "'," + person.getAge() + ",'" + person.getEmail() + "')";

            statement.executeUpdate(SQL);
        } catch (SQLException e4) {
            e4.printStackTrace();
        }
    }
.

---

SQL инъекция

Один из самых распространенных способов взлома сайтов
и программ, работающих с базами данных
Так как строкаи из HTML формы напрямую конкатенируются в
SQL запросе, злоумышленник может подобрать такую строку,
которая нанесет вред.
Пример:
В качестве email в форме мы введем строку
test@mail.ru'); DROP TABLE Person; --
удаление строки
В данном случае мы использовали тот факт, что
можно через точку с запятой выписавыть несколько SQL
операторов

---

Еще пример:
В поле записываем
UserId: 105 OR 1=1
это может соответствовать запросу
select * from Users where UserId = 105 OR 1=1;
Таким образом можно получить всю таблицу

---

Защита от SQL инъекций
Специальный класс PrepareStatement
То что должно использоваться в JDBC API для всех запросов,
где содержаться данные, полученные от пользователя
SQL запрос компилируется один раз и не может быть
изменен. Данные от пользователя могут быть вставлены
лишь в указанные места запроса и не могут
изменить сам SQL запрос.
После этого даже "заряженная" строка будет восприниматься
просто как строка

---

Преимущества PreparedStatement
- удобнее использовать, чем Statement
(не надо вручную заниматься конкатенцией)
- Предотвращает SQL инъекции

- Быстрее, чем Statement, особенно, если запросов много
PreparedStatement - SQL запрос компилируется только один раз
Statement - SQL запрос компилируется каждый раз
PreparedStatement может ещё кешироваться на самой БД.








